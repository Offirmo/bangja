'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _module_loader = require('./module_loader');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _prettyjson = require('prettyjson');

var _prettyjson2 = _interopRequireDefault(_prettyjson);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	run: run
};


function run(options) {
	console.log('* running with options:', _prettyjson2.default.render(options));

	hello();

	(0, _module_loader.detect_modules)().then(_module_loader.load_modules).then(perform_analysis).catch(err => {
		console.error('ERROR !');
		console.error(err.message);
		console.error(_prettyjson2.default.render(err));
	});
}

function hello() {
	console.log(`
Bangja: Hello O great master !
        I'm here to take care of the menial stuff so you can save the world !
`);
}

function perform_analysis(modules, cb) {
	return;
	const diagnostic_keys = Object.keys(modules.diagnostics);

	console.log('* Running diagnostics...', diagnostic_keys);

	const auto_diagnostic = {};
	diagnostic_keys.forEach(id => {
		auto_diagnostic[id] = modules.diagnostics[id].async_auto_task;
	});

	//console.log('* TODO run\n' + util.inspect(auto_diagnostic, {colors: true}));

	_async2.default.auto(auto_diagnostic, (err, results) => {
		console.info('* Diagnostics finished :');
		console.log('  - err = ', err);
		console.log('  - results = ', results);
	});
}

function perform_recipe(recipe, diagnostics) {}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb3JlL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBRUE7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7a0JBRWU7QUFDZCxTQURjOzs7O0FBS2YsU0FBUyxHQUFULENBQWEsT0FBYixFQUFzQjtBQUNyQixTQUFRLEdBQVIsQ0FBWSx5QkFBWixFQUF1QyxxQkFBVyxNQUFYLENBQWtCLE9BQWxCLENBQXZDLEVBRHFCOztBQUdyQixTQUhxQjs7QUFLckIsc0NBQ0MsSUFERCw4QkFFQyxJQUZELENBRU0sZ0JBRk4sRUFHQyxLQUhELENBR08sT0FBTztBQUNiLFVBQVEsS0FBUixDQUFjLFNBQWQsRUFEYTtBQUViLFVBQVEsS0FBUixDQUFjLElBQUksT0FBSixDQUFkLENBRmE7QUFHYixVQUFRLEtBQVIsQ0FBYyxxQkFBVyxNQUFYLENBQWtCLEdBQWxCLENBQWQsRUFIYTtFQUFQLENBSFAsQ0FMcUI7Q0FBdEI7O0FBZ0JBLFNBQVMsS0FBVCxHQUFpQjtBQUNoQixTQUFRLEdBQVIsQ0FBWSxDQUFDOzs7QUFBRCxDQUFaLEVBRGdCO0NBQWpCOztBQVFBLFNBQVMsZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMsRUFBbkMsRUFBdUM7QUFDdEMsUUFEc0M7QUFFdEMsT0FBTSxrQkFBa0IsT0FBTyxJQUFQLENBQVksUUFBUSxXQUFSLENBQTlCLENBRmdDOztBQUl0QyxTQUFRLEdBQVIsQ0FBWSwwQkFBWixFQUF3QyxlQUF4QyxFQUpzQzs7QUFNdEMsT0FBTSxrQkFBa0IsRUFBbEIsQ0FOZ0M7QUFPdEMsaUJBQWdCLE9BQWhCLENBQXdCLE1BQU07QUFDN0Isa0JBQWdCLEVBQWhCLElBQXNCLFFBQVEsV0FBUixDQUFvQixFQUFwQixFQUF3QixlQUF4QixDQURPO0VBQU4sQ0FBeEI7Ozs7QUFQc0MsZ0JBYXRDLENBQU0sSUFBTixDQUFXLGVBQVgsRUFBNEIsQ0FBQyxHQUFELEVBQU0sT0FBTixLQUFrQjtBQUM3QyxVQUFRLElBQVIsQ0FBYSwwQkFBYixFQUQ2QztBQUU3QyxVQUFRLEdBQVIsQ0FBWSxZQUFaLEVBQTBCLEdBQTFCLEVBRjZDO0FBRzdDLFVBQVEsR0FBUixDQUFZLGdCQUFaLEVBQThCLE9BQTlCLEVBSDZDO0VBQWxCLENBQTVCLENBYnNDO0NBQXZDOztBQXFCQSxTQUFTLGNBQVQsQ0FBd0IsTUFBeEIsRUFBZ0MsV0FBaEMsRUFBNkMsRUFBN0MiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXRpbCBmcm9tICd1dGlsJztcblxuaW1wb3J0IHtkZXRlY3RfbW9kdWxlcywgbG9hZF9tb2R1bGVzfSBmcm9tICcuL21vZHVsZV9sb2FkZXInO1xuXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGFzeW5jIGZyb20gJ2FzeW5jJztcbmltcG9ydCBwcmV0dHlqc29uIGZyb20gJ3ByZXR0eWpzb24nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdHJ1blxufTtcblxuXG5mdW5jdGlvbiBydW4ob3B0aW9ucykge1xuXHRjb25zb2xlLmxvZygnKiBydW5uaW5nIHdpdGggb3B0aW9uczonLCBwcmV0dHlqc29uLnJlbmRlcihvcHRpb25zKSk7XG5cblx0aGVsbG8oKTtcblxuXHRkZXRlY3RfbW9kdWxlcygpXG5cdC50aGVuKGxvYWRfbW9kdWxlcylcblx0LnRoZW4ocGVyZm9ybV9hbmFseXNpcylcblx0LmNhdGNoKGVyciA9PiB7XG5cdFx0Y29uc29sZS5lcnJvcignRVJST1IgIScpO1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpO1xuXHRcdGNvbnNvbGUuZXJyb3IocHJldHR5anNvbi5yZW5kZXIoZXJyKSk7XG5cdH0pO1xufVxuXG5cbmZ1bmN0aW9uIGhlbGxvKCkge1xuXHRjb25zb2xlLmxvZyhgXG5CYW5namE6IEhlbGxvIE8gZ3JlYXQgbWFzdGVyICFcbiAgICAgICAgSSdtIGhlcmUgdG8gdGFrZSBjYXJlIG9mIHRoZSBtZW5pYWwgc3R1ZmYgc28geW91IGNhbiBzYXZlIHRoZSB3b3JsZCAhXG5gKTtcbn1cblxuXG5mdW5jdGlvbiBwZXJmb3JtX2FuYWx5c2lzKG1vZHVsZXMsIGNiKSB7XG5cdHJldHVybjtcblx0Y29uc3QgZGlhZ25vc3RpY19rZXlzID0gT2JqZWN0LmtleXMobW9kdWxlcy5kaWFnbm9zdGljcyk7XG5cblx0Y29uc29sZS5sb2coJyogUnVubmluZyBkaWFnbm9zdGljcy4uLicsIGRpYWdub3N0aWNfa2V5cyk7XG5cblx0Y29uc3QgYXV0b19kaWFnbm9zdGljID0ge307XG5cdGRpYWdub3N0aWNfa2V5cy5mb3JFYWNoKGlkID0+IHtcblx0XHRhdXRvX2RpYWdub3N0aWNbaWRdID0gbW9kdWxlcy5kaWFnbm9zdGljc1tpZF0uYXN5bmNfYXV0b190YXNrXG5cdH0pO1xuXG5cdC8vY29uc29sZS5sb2coJyogVE9ETyBydW5cXG4nICsgdXRpbC5pbnNwZWN0KGF1dG9fZGlhZ25vc3RpYywge2NvbG9yczogdHJ1ZX0pKTtcblxuXHRhc3luYy5hdXRvKGF1dG9fZGlhZ25vc3RpYywgKGVyciwgcmVzdWx0cykgPT4ge1xuXHRcdGNvbnNvbGUuaW5mbygnKiBEaWFnbm9zdGljcyBmaW5pc2hlZCA6Jyk7XG5cdFx0Y29uc29sZS5sb2coJyAgLSBlcnIgPSAnLCBlcnIpO1xuXHRcdGNvbnNvbGUubG9nKCcgIC0gcmVzdWx0cyA9ICcsIHJlc3VsdHMpO1xuXHR9KTtcbn1cblxuXG5mdW5jdGlvbiBwZXJmb3JtX3JlY2lwZShyZWNpcGUsIGRpYWdub3N0aWNzKSB7XG5cbn1cbiJdfQ==