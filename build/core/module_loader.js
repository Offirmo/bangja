'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.detect_modules = detect_modules;
exports.load_modules = load_modules;
exports.load_module = load_module;

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _async = require('async');

var _async2 = _interopRequireDefault(_async);

var _prettyjson = require('prettyjson');

var _prettyjson2 = _interopRequireDefault(_prettyjson);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const submodule_types = ['observation', 'diagnostic', 'chore'];

function detect_modules() {
	let module_sources = [_path2.default.join(__dirname, '../modules')];
	// TODO look into named package.json
	// TODO look at params
	console.log('* Detected sources :\n' + _util2.default.inspect(module_sources, { colors: true }));

	return Promise.all(module_sources.map(_utils.get_directories)).then(mod_pathes => _lodash2.default.flatten(mod_pathes)).then(mod_pathes => {
		console.log('* Detected modules :\n' + _util2.default.inspect(mod_pathes, { colors: true }));
		return mod_pathes;
	});
}

function load_modules(mod_pathes) {
	console.log('* Loading modules :\n' + _util2.default.inspect(mod_pathes, { colors: true }));
	const base = {};

	return Promise.all(mod_pathes.map(load_module)).then(modules => {
		// TODO merge them

		console.log('* Loaded modules :\n' + _util2.default.inspect(modules, { colors: true }));

		submodule_types.forEach(type => {
			const entry = base[type + 's'] = {};

			modules.forEach(module => {
				Object.assign(entry, module[type + 's']);
			});
		});

		console.log('* Final base :\n' + _util2.default.inspect(base, { colors: true }));

		return base;
	});
}

function load_module(mod_path) {
	const module = {
		id: mod_path.split(_path2.default.sep).slice(-1)[0] // for debug
	};
	console.log(`* loading module "${ module.id }"...`);

	return Promise.all(submodule_types.map(type => {
		const submod_entry = module[type + 's'] = {};

		return load_typed_submodules(module.id, type, mod_path).then(submodules => {
			submodules.forEach(submodule => submod_entry[submodule.id] = submodule);
		});
	})).then(submodules => {
		return module;
	});
}

function load_typed_submodules(module_id, type, mod_path) {
	console.log(`* loading type "${ type }" submodules from "${ mod_path }"...`);
	const typed_path = _path2.default.join(mod_path, type + 's');

	return (0, _utils.get_directories)(typed_path).then(submod_pathes => {
		if (submod_pathes.length) console.log('submodule_pathes', submod_pathes);

		return Promise.all(submod_pathes.map(load_typed_submodule.bind(null, module.id, type)));
	});
}

function load_typed_submodule(module_id, type, submod_path) {
	const id = type + ':' + module_id + '/' + submod_path.split(_path2.default.sep).slice(-1)[0];
	console.log(`* loading submodule "${ id }"...`);

	const mod = (0, _utils.non_throwing_require)(submod_path);
	if (!mod) return;

	//console.log(util.inspect(mod, {colors: true}));
	return {
		id: id,
		fn: mod.perform,
		dependencies: mod.dependencies,
		async_auto_task: mod.dependencies.concat(mod.perform)
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb3JlL21vZHVsZV9sb2FkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFXZ0I7UUFpQkE7UUF5QkE7O0FBckRoQjs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFFQSxNQUFNLGtCQUFrQixDQUFFLGFBQUYsRUFBa0IsWUFBbEIsRUFBaUMsT0FBakMsQ0FBbEI7O0FBRUMsU0FBUyxjQUFULEdBQTBCO0FBQ2hDLEtBQUksaUJBQWlCLENBQ3BCLGVBQUssSUFBTCxDQUFVLFNBQVYsRUFBcUIsWUFBckIsQ0FEb0IsQ0FBakI7OztBQUQ0QixRQU1oQyxDQUFRLEdBQVIsQ0FBWSwyQkFBMkIsZUFBSyxPQUFMLENBQWEsY0FBYixFQUE2QixFQUFDLFFBQVEsSUFBUixFQUE5QixDQUEzQixDQUFaLENBTmdDOztBQVFoQyxRQUFPLFFBQVEsR0FBUixDQUFZLGVBQWUsR0FBZix3QkFBWixFQUNOLElBRE0sQ0FDRCxjQUFjLGlCQUFFLE9BQUYsQ0FBVSxVQUFWLENBQWQsQ0FEQyxDQUVOLElBRk0sQ0FFRCxjQUFjO0FBQ25CLFVBQVEsR0FBUixDQUFZLDJCQUEyQixlQUFLLE9BQUwsQ0FBYSxVQUFiLEVBQXlCLEVBQUMsUUFBUSxJQUFSLEVBQTFCLENBQTNCLENBQVosQ0FEbUI7QUFFbkIsU0FBTyxVQUFQLENBRm1CO0VBQWQsQ0FGTixDQVJnQztDQUExQjs7QUFpQkEsU0FBUyxZQUFULENBQXNCLFVBQXRCLEVBQWtDO0FBQ3hDLFNBQVEsR0FBUixDQUFZLDBCQUEwQixlQUFLLE9BQUwsQ0FBYSxVQUFiLEVBQXlCLEVBQUMsUUFBUSxJQUFSLEVBQTFCLENBQTFCLENBQVosQ0FEd0M7QUFFeEMsT0FBTSxPQUFPLEVBQVAsQ0FGa0M7O0FBSXhDLFFBQU8sUUFBUSxHQUFSLENBQVksV0FBVyxHQUFYLENBQWUsV0FBZixDQUFaLEVBQ04sSUFETSxDQUNELFdBQVc7OztBQUdoQixVQUFRLEdBQVIsQ0FB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RCxRQVFwRDtBQUNOLFFBRE07QUFFTixNQUFJLElBQUksT0FBSjtBQUNKLGdCQUFjLElBQUksWUFBSjtBQUNkLG1CQUFpQixJQUFJLFlBQUosQ0FBaUIsTUFBakIsQ0FBd0IsSUFBSSxPQUFKLENBQXpDO0VBSkQsQ0FSMkQ7Q0FBNUQiLCJmaWxlIjoibW9kdWxlX2xvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1dGlsIGZyb20gJ3V0aWwnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgYXN5bmMgZnJvbSAnYXN5bmMnO1xuaW1wb3J0IHByZXR0eWpzb24gZnJvbSAncHJldHR5anNvbic7XG5cbmltcG9ydCB7Z2V0X2RpcmVjdG9yaWVzLCBub25fdGhyb3dpbmdfcmVxdWlyZX0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IHN1Ym1vZHVsZV90eXBlcyA9IFsgJ29ic2VydmF0aW9uJywgICdkaWFnbm9zdGljJywgICdjaG9yZScgXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdF9tb2R1bGVzKCkge1xuXHRsZXQgbW9kdWxlX3NvdXJjZXMgPSBbXG5cdFx0cGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL21vZHVsZXMnKVxuXHRdO1xuXHQvLyBUT0RPIGxvb2sgaW50byBuYW1lZCBwYWNrYWdlLmpzb25cblx0Ly8gVE9ETyBsb29rIGF0IHBhcmFtc1xuXHRjb25zb2xlLmxvZygnKiBEZXRlY3RlZCBzb3VyY2VzIDpcXG4nICsgdXRpbC5pbnNwZWN0KG1vZHVsZV9zb3VyY2VzLCB7Y29sb3JzOiB0cnVlfSkpO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChtb2R1bGVfc291cmNlcy5tYXAoZ2V0X2RpcmVjdG9yaWVzKSlcblx0LnRoZW4obW9kX3BhdGhlcyA9PiBfLmZsYXR0ZW4obW9kX3BhdGhlcykpXG5cdC50aGVuKG1vZF9wYXRoZXMgPT4ge1xuXHRcdGNvbnNvbGUubG9nKCcqIERldGVjdGVkIG1vZHVsZXMgOlxcbicgKyB1dGlsLmluc3BlY3QobW9kX3BhdGhlcywge2NvbG9yczogdHJ1ZX0pKTtcblx0XHRyZXR1cm4gbW9kX3BhdGhlcztcblx0fSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRfbW9kdWxlcyhtb2RfcGF0aGVzKSB7XG5cdGNvbnNvbGUubG9nKCcqIExvYWRpbmcgbW9kdWxlcyA6XFxuJyArIHV0aWwuaW5zcGVjdChtb2RfcGF0aGVzLCB7Y29sb3JzOiB0cnVlfSkpO1xuXHRjb25zdCBiYXNlID0ge307XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKG1vZF9wYXRoZXMubWFwKGxvYWRfbW9kdWxlKSlcblx0LnRoZW4obW9kdWxlcyA9PiB7XG5cdFx0Ly8gVE9ETyBtZXJnZSB0aGVtXG5cblx0XHRjb25zb2xlLmxvZygnKiBMb2FkZWQgbW9kdWxlcyA6XFxuJyArIHV0aWwuaW5zcGVjdChtb2R1bGVzLCB7Y29sb3JzOiB0cnVlfSkpO1xuXG5cdFx0c3VibW9kdWxlX3R5cGVzLmZvckVhY2godHlwZSA9PiB7XG5cdFx0XHRjb25zdCBlbnRyeSA9IGJhc2VbdHlwZSArICdzJ10gPSB7fTtcblxuXHRcdFx0bW9kdWxlcy5mb3JFYWNoKG1vZHVsZSA9PiB7XG5cdFx0XHRcdE9iamVjdC5hc3NpZ24oZW50cnksIG1vZHVsZVt0eXBlICsgJ3MnXSk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdGNvbnNvbGUubG9nKCcqIEZpbmFsIGJhc2UgOlxcbicgKyB1dGlsLmluc3BlY3QoYmFzZSwge2NvbG9yczogdHJ1ZX0pKTtcblxuXHRcdHJldHVybiBiYXNlO1xuXHR9KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZF9tb2R1bGUobW9kX3BhdGgpIHtcblx0Y29uc3QgbW9kdWxlID0ge1xuXHRcdGlkOiBtb2RfcGF0aC5zcGxpdChwYXRoLnNlcCkuc2xpY2UoLTEpWzBdIC8vIGZvciBkZWJ1Z1xuXHR9O1xuXHRjb25zb2xlLmxvZyhgKiBsb2FkaW5nIG1vZHVsZSBcIiR7bW9kdWxlLmlkfVwiLi4uYCk7XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKHN1Ym1vZHVsZV90eXBlcy5tYXAodHlwZSA9PiB7XG5cdFx0Y29uc3Qgc3VibW9kX2VudHJ5ID0gbW9kdWxlW3R5cGUgKyAncyddID0ge307XG5cblx0XHRyZXR1cm4gbG9hZF90eXBlZF9zdWJtb2R1bGVzKG1vZHVsZS5pZCwgdHlwZSwgbW9kX3BhdGgpXG5cdFx0LnRoZW4oc3VibW9kdWxlcyA9PiB7XG5cdFx0XHRzdWJtb2R1bGVzLmZvckVhY2goc3VibW9kdWxlID0+IHN1Ym1vZF9lbnRyeVtzdWJtb2R1bGUuaWRdID0gc3VibW9kdWxlKTtcblx0XHR9KTtcblx0fSkpXG5cdC50aGVuKHN1Ym1vZHVsZXMgPT4ge1xuXHRcdHJldHVybiBtb2R1bGU7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkX3R5cGVkX3N1Ym1vZHVsZXMobW9kdWxlX2lkLCB0eXBlLCBtb2RfcGF0aCkge1xuXHRjb25zb2xlLmxvZyhgKiBsb2FkaW5nIHR5cGUgXCIke3R5cGV9XCIgc3VibW9kdWxlcyBmcm9tIFwiJHttb2RfcGF0aH1cIi4uLmApO1xuXHRjb25zdCB0eXBlZF9wYXRoID0gcGF0aC5qb2luKG1vZF9wYXRoLCB0eXBlICsgJ3MnKTtcblxuXHRyZXR1cm4gZ2V0X2RpcmVjdG9yaWVzKHR5cGVkX3BhdGgpXG5cdC50aGVuKHN1Ym1vZF9wYXRoZXMgPT4ge1xuXHRcdGlmIChzdWJtb2RfcGF0aGVzLmxlbmd0aCkgY29uc29sZS5sb2coJ3N1Ym1vZHVsZV9wYXRoZXMnLCBzdWJtb2RfcGF0aGVzKTtcblxuXHRcdHJldHVybiBQcm9taXNlLmFsbChzdWJtb2RfcGF0aGVzLm1hcChsb2FkX3R5cGVkX3N1Ym1vZHVsZS5iaW5kKG51bGwsIG1vZHVsZS5pZCwgdHlwZSkpKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRfdHlwZWRfc3VibW9kdWxlKG1vZHVsZV9pZCwgdHlwZSwgc3VibW9kX3BhdGgpIHtcblx0Y29uc3QgaWQgPSB0eXBlICsgJzonICsgbW9kdWxlX2lkICsgJy8nICsgc3VibW9kX3BhdGguc3BsaXQocGF0aC5zZXApLnNsaWNlKC0xKVswXTtcblx0Y29uc29sZS5sb2coYCogbG9hZGluZyBzdWJtb2R1bGUgXCIke2lkfVwiLi4uYCk7XG5cblx0Y29uc3QgbW9kID0gbm9uX3Rocm93aW5nX3JlcXVpcmUoc3VibW9kX3BhdGgpO1xuXHRpZiAoISBtb2QpIHJldHVybjtcblxuXHQvL2NvbnNvbGUubG9nKHV0aWwuaW5zcGVjdChtb2QsIHtjb2xvcnM6IHRydWV9KSk7XG5cdHJldHVybiB7XG5cdFx0aWQsXG5cdFx0Zm46IG1vZC5wZXJmb3JtLFxuXHRcdGRlcGVuZGVuY2llczogbW9kLmRlcGVuZGVuY2llcyxcblx0XHRhc3luY19hdXRvX3Rhc2s6IG1vZC5kZXBlbmRlbmNpZXMuY29uY2F0KG1vZC5wZXJmb3JtKVxuXHR9O1xufVxuIl19